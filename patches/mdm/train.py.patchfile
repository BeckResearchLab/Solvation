--- .//mdm/train.py	2025-02-19 14:47:21.323101344 -0800
+++ ./pnnlsolpaper/mdm/train.py	2025-02-19 14:48:04.713091491 -0800
@@ -1,10 +1,13 @@
-#import keras
-import tensorflow as tf
+import keras
 import matplotlib.pyplot as plt
 import numpy as np
+from keras.callbacks import EarlyStopping
 import pandas as pd
 from sklearn.model_selection import train_test_split
+from keras.callbacks import ModelCheckpoint
+from keras.models import load_model
 import matplotlib.pyplot as plt
+from keras.initializers import random_normal, random_uniform
 from rdkit import Chem
 from rdkit.Chem.Draw import IPythonConsole #Needed to show molecules
 from rdkit.Chem.Draw.MolDrawing import MolDrawing, DrawingOptions
@@ -15,34 +18,23 @@
 from sklearn.metrics import mean_absolute_error
 import pickle
 import json
-from . import mdm_model
-from . import config
-from . import mdm_utils
+import mdm_model
+import config
+import mdm_utils
 import datetime
 
-from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
-from tensorflow.keras.models import load_model
-from tensorflow.keras.initializers import RandomNormal, RandomUniform
-
-
 def run():
     
-    to_remove = [ 'cas', 'ref', 'temp','inchi']
- 
-    #loading training, test and validation data
+    to_remove = [ 'cas', 'ref', 'temp','inchi'] 
 
     train = pd.read_csv(config.data_dir+"train.csv")
     val = pd.read_csv(config.data_dir+"val.csv")
     test = pd.read_csv(config.data_dir+"test.csv")
 
-    #dropping unnecessary columns
 
     train = train.drop(to_remove, axis=1)
     val = val.drop(to_remove, axis=1)
     test = test.drop(to_remove, axis=1)
-    
-    #checking for duplicates in Datasets
-
     mdm_utils.check_duplicates(train,val,test)
 
     trainx = train
@@ -51,23 +43,19 @@
 
     to_drop = ['log_sol', 'smiles']
 
-    #transform data
     x_train,y_train, x_test, y_test, x_val, y_val, sc = mdm_utils.get_transformed_data(train   = trainx, 
                                                                              val     = valx, 
                                                                              test    = testx, 
                                                                              to_drop = to_drop, 
                                                                              y       = "log_sol")
 
-    #create model
+
     model = mdm_model.create_model(x_train.shape[1])
-    
-    #define callbacks for early stopping and saving the best model
+
     es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=config.patience)
-    if os.path.exists(config.best_model):
-        os.remove(config.best_model)
+    os.system(f"rm {config.best_model}")
     mc = ModelCheckpoint(f'{config.best_model}', monitor='val_loss', mode='min', save_best_only=True, verbose=1)
 
-    #train model
     result = model.fit(x_train, y_train, batch_size = config.batch_size, epochs = config.max_epochs,
               verbose = 2, validation_data = (x_val,y_val), callbacks = [es,mc])
 
