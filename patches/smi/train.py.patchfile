--- ./pnnlsolpaper/smi/train.py	2025-04-16 00:56:12.492048283 -0700
+++ ./src/smi/train.py	2025-04-09 20:19:40.054417215 -0700
@@ -1,7 +1,6 @@
 import keras
 import pandas as pd
-from keras.callbacks import EarlyStopping
-from keras.callbacks import ModelCheckpoint
+from keras.callbacks import EarlyStopping, ModelCheckpoint
 from sklearn.metrics import mean_squared_error
 from keras.preprocessing import sequence
 from keras import backend as K
@@ -13,16 +12,18 @@
 from scipy.stats import spearmanr
 import json
 import os
-import smi_utils
-import smi_model
-import config
+from . import smi_utils
+from . import smi_model
+from . import config
+from .smi_utils import create_file_path
+
 import datetime
 
 def run():
     
-    train = pd.read_csv(config.data_dir+"train.csv")
-    val = pd.read_csv(config.data_dir+"val.csv")
-    test = pd.read_csv(config.data_dir+"test.csv")
+    train = pd.read_csv(create_file_path(config.data_dir+"train.csv"))
+    val = pd.read_csv(create_file_path(config.data_dir+"val.csv"))
+    test = pd.read_csv(create_file_path(config.data_dir+"test.csv"))
 
     trainx, valx, testx = train, val, test
     smiles_train = list(trainx.smiles.values.ravel())
@@ -38,7 +39,7 @@
     model = smi_model.create_model(max_features = max_features, maxlen = maxlen)
 
     es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = config.patience)
-    mc = ModelCheckpoint( config.best_model, monitor='val_loss', mode='min', save_best_only=True, verbose=1)
+    mc = ModelCheckpoint( create_file_path(config.best_model), monitor='val_loss', mode='min', save_best_only=True, verbose=1)
 
     result = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=config.max_epochs,
                        batch_size = config.batch_size, verbose = True, callbacks=[es,mc])
